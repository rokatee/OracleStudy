-- 오라클 서버(찬우) SYS에서 계정 생성
/*
CREATE USER no1 IDENTIFIED BY hello;
GRANT CONNECT,RESOURCE,UNLIMITED TABLESPACE TO no1;
ALTER USER no1 DEFAULT TABLESPACE USERS;
ALTER USER no1 TEMPORARY TABLESPACE TEMP;
*/

SELECT *
FROM TABS;

DROP TABLE TBL_ADMIN PURGE;
DROP TABLE TBL_PROFESSOR PURGE;
DROP TABLE TBL_CLASS PURGE;
DROP TABLE TBL_ABLE PURGE;
DROP TABLE TBL_COURSE PURGE;
DROP TABLE TBL_CLASSROOM PURGE;
DROP TABLE TBL_OCOURSE PURGE;
DROP TABLE TBL_TEXTBOOK PURGE;
DROP TABLE TBL_OCLASS PURGE;
DROP TABLE TBL_STUDENT PURGE;
DROP TABLE TBL_REASON PURGE;
DROP TABLE TBL_SIGN PURGE;
DROP TABLE TBL_FAIL PURGE;
DROP TABLE TBL_POINT PURGE;
DROP TABLE TBL_GRADE PURGE;


-- TBL_ADMIN(관리자) 생성 ------------------------------------------------------

CREATE TABLE TBL_ADMIN  
( ADMIN_ID      VARCHAR2(30)	                                                                    -- 관리자 아이디 (PK)
, ADMIN_PW      VARCHAR2(15)	                    CONSTRAINT ADMIN_ADMIN_PW_NN NOT NULL       -- 관리자 비밀번호
, ADMIN_NAME	VARCHAR2(30)                                                                    -- 관리자명
, ADMIN_DATE	DATE            DEFAULT SYSDATE     CONSTRAINT ADMIN_ADMIN_DATE_NN NOT NULL	    -- 관리자 등록일
, CONSTRAINT ADMIN_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);  

-- COMMENT 추가
COMMENT ON TABLE TBL_ADMIN IS '관리자 테이블';

COMMENT ON COLUMN TBL_ADMIN.ADMIN_ID IS '관리자 아이디';
COMMENT ON COLUMN TBL_ADMIN.ADMIN_PW IS '관리자 비밀번호';
COMMENT ON COLUMN TBL_ADMIN.ADMIN_NAME IS '관리자명';
COMMENT ON COLUMN TBL_ADMIN.ADMIN_DATE IS '관리자 등록일';

-- INSERT 프로시저 테스트
EXEC PRC_ADMIN_INSERT('IDID1', '2111111', '김인교');
EXEC PRC_ADMIN_INSERT('IDID2', '2111132', '최나윤');
EXEC PRC_ADMIN_INSERT('IDID3', '2111123', '정미경');
EXEC PRC_ADMIN_INSERT('IDID4', '2211123', '고연수');
EXEC PRC_ADMIN_INSERT('IDID4', '2211123', '고연수');   -- 중복 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_ADMIN_UPDATE('IDID5', '1111111', '김인교');   -- 없는 데이터
EXEC PRC_ADMIN_UPDATE('IDID1', '1111111', '김인교');

-- DELETE 프로시저 테스트
EXEC PRC_ADMIN_DELETE('IDID6');     -- 없는 데이터
EXEC PRC_ADMIN_DELETE('IDID5');

SELECT *
FROM TBL_ADMIN;


-- TBL_PROFESSOR(교수) 생성 ----------------------------------------------------

CREATE TABLE TBL_PROFESSOR
( PRO_ID        VARCHAR2(30)                                                    -- 교수 아이디 (PK)
, PRO_NAME      VARCHAR2(30)    CONSTRAINT PROFESSOR_PRO_NAME_NN NOT NULL       -- 교수명
, PRO_PW        VARCHAR2(15)    CONSTRAINT PROFESSOR_PRO_PW_NN NOT NULL         -- 비밀번호
, PRO_SSN       CHAR(14)        CONSTRAINT PROFESSOR_SSN_NN NOT NULL            -- 주민등록번호
, PRO_EMAIL     VARCHAR2(30)                                                    -- 교수 이메일
, PRO_PHONE     VARCHAR2(20)                                                    -- 교수 폰번호
, PRO_DATE      DATE           DEFAULT SYSDATE                                  -- 교수 가입날짜
, CONSTRAINT PROFESSOR_PRO_ID_PK PRIMARY KEY(PRO_ID)
);

-- UK 제약조건 추가
ALTER TABLE TBL_PROFESSOR
ADD CONSTRAINT PROFESSOR_PRO_SNN_UK UNIQUE(PRO_SSN);

-- COMMENT 추가
COMMENT ON TABLE TBL_PROFESSOR IS '교수 테이블';

COMMENT ON COLUMN TBL_PROFESSOR.PRO_ID IS '교수 아이디';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_NAME IS '교수명';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_PW IS '비밀번호';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_SSN IS '주민등록번호';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_EMAIL IS '교수 이메일';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_PHONE IS '교수 폰번호';
COMMENT ON COLUMN TBL_PROFESSOR.PRO_DATE IS '교수 가입날짜';

-- INSERT 프로시저 테스트
EXEC PRC_PROFESSOR_INSERT('PRO1', '고연수', '123456-2222222', 'RHDUSTN6223@GMAIL.COM', '');
EXEC PRC_PROFESSOR_INSERT('PRO1', '김인교', '123456-1111111', '', '010-1234-5678');                        -- 동일 아이디
EXEC PRC_PROFESSOR_INSERT('PRO3', '민찬우', '234567-1111111', 'ALSCKSDN12@NAVER.COM', '');
EXEC PRC_PROFESSOR_INSERT('PRO4', '정미경', '123456-2222222', 'WJDALRUD00@GMAIL.COM', '010-5678-1234');    -- 동일 주민번호
EXEC PRC_PROFESSOR_INSERT('PRO5', '최나윤', '345678-2222222', 'SKDBSNO1@GMAIL.COM', '010-1111-2222');

EXEC PRC_PROFESSOR_INSERT('PRO6', '가연수', '456789-2222222', 'SKDBSNO1@GMAIL.COM', '010-1111-2222');      -- UPDATE 및 DELETE 프로시저 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_PROFESSOR_UPDATE('PRO7', '김인교', '1111111', '', '010-1234-5678');       -- 없는 데이터
EXEC PRC_PROFESSOR_UPDATE('PRO6', '가연수', '2111111', '', '010-1111-2222');

-- DELETE 프로시저 테스트
EXEC PRC_PROFESSOR_DELETE('PRO7');      -- 없는 데이터
EXEC PRC_PROFESSOR_DELETE('PRO1');      -- 사용 중인 데이터
EXEC PRC_PROFESSOR_DELETE('PRO6');

SELECT *
FROM TBL_PROFESSOR;


-- TBL_CLASS(과목) 생성 --------------------------------------------------------

CREATE TABLE TBL_CLASS
( CLASS_CODE    NUMBER                                                      -- 과목코드 (PK)
, CLASS_NAME    VARCHAR2(30)    CONSTRAINT CLASS_CLASS_NAME_NN NOT NULL     -- 과목명
, CONSTRAINT CLASS_CLASS_CODE_PK PRIMARY KEY(CLASS_CODE)
);

-- 제약조건 추가
ALTER TABLE TBL_CLASS
ADD CONSTRAINT CLASS_CLASS_NAME_UK UNIQUE(CLASS_NAME);

-- 코드용 시퀀스 생성
CREATE SEQUENCE TBL_CLASS_SEQ
NOCACHE;

-- COMMENT 추가
COMMENT ON TABLE TBL_CLASS IS '과목 테이블';

COMMENT ON COLUMN TBL_CLASS.CLASS_CODE IS '과목코드';
COMMENT ON COLUMN TBL_CLASS.CLASS_NAME IS '과목명';

-- INSERT 프로시저 테스트
EXEC PRC_CLASS_INSERT('오라클');
EXEC PRC_CLASS_INSERT('오라클');       -- 동일 과목명
EXEC PRC_CLASS_INSERT('자바');
EXEC PRC_CLASS_INSERT('파이썬');
EXEC PRC_CLASS_INSERT('스프링');
EXEC PRC_CLASS_INSERT('JSP');

EXEC PRC_CLASS_INSERT('TEST');          -- UPDATE 및 DELETE 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_CLASS_UPDATE(8, 'TEST2');      -- 없는 데이터
EXEC PRC_CLASS_UPDATE(1, '오라클');     -- 중복 데이터
EXEC PRC_CLASS_UPDATE(6, 'TEST2');

-- DELETE 프로시저 테스트
EXEC PRC_CLASS_DELETE('NULL');         -- 없는 데이터
EXEC PRC_CLASS_DELETE('오라클');         -- 이미 사용 중인 데이터
EXEC PRC_CLASS_DELETE('TEST2');

SELECT *
FROM TBL_CLASS;


-- TBl_ABLE(강의 가능 여부) 생성 -----------------------------------------------

CREATE TABLE TBL_ABLE
( ABLE_CODE   NUMBER                                                        -- 강의 가능 여부 코드  (PK)
, CLASS_CODE  NUMBER        CONSTRAINT ABLE_CLASS_CODE_NN NOT NULL          -- 과목코드 (FK : TBL_CLASS)
, PRO_ID    VARCHAR2(10)    CONSTRAINT ABLE_PRO_ID_NN NOT NULL              -- 교수 아이디 (FK : TBL_PROFESSOR)
, CONSTRAINT ABLE_ABLE_CODE_PK PRIMARY KEY(ABLE_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_ABLE
ADD ( CONSTRAINT ABLE_CLASS_CODE_FK FOREIGN KEY(CLASS_CODE)
                 REFERENCES TBL_CLASS(CLASS_CODE)
    , CONSTRAINT ABLE_PRO_ID_FK FOREIGN KEY(PRO_ID)
                 REFERENCES TBL_PROFESSOR(PRO_ID) );
                 
-- UK 제약조건 추가
ALTER TABLE TBL_ABLE
ADD CONSTRAINT ABLE_NAME_UK UNIQUE(PRO_ID, CLASS_CODE);
                 
-- 코드용 시퀀스 생성
CREATE SEQUENCE TBL_ABLE_SEQ
NOCACHE;

-- COMMENT 추가
COMMENT ON TABLE TBL_ABLE IS '강의 가능 여부 테이블';

COMMENT ON COLUMN TBL_ABLE.ABLE_CODE IS '강의 가능 여부 코드';
COMMENT ON COLUMN TBL_ABLE.CLASS_CODE IS '과목코드';
COMMENT ON COLUMN TBL_ABLE.PRO_ID IS '교수 아이디';

-- INSERT 프로시저 테스트
EXEC PRC_ABLE_INSERT('고연수', '오라클');
EXEC PRC_ABLE_INSERT('김인', '자바');             -- 없는 교수명
EXEC PRC_ABLE_INSERT('김인교', '자바');
EXEC PRC_ABLE_INSERT('민찬우', '파이');           -- 없는 과목명
EXEC PRC_ABLE_INSERT('정미경', 'JSP');
EXEC PRC_ABLE_INSERT('최나윤', '스프링');

-- UPDATE 프로시저 테스트
EXEC PRC_ABLE_UPDATE(10, '파이썬', '고연수');     -- 없는 데이터
EXEC PRC_ABLE_UPDATE(1, '파이썬', '연수');        -- 없는 교수명
EXEC PRC_ABLE_UPDATE(1, '파이', '고연수');        -- 없는 과목명
EXEC PRC_ABLE_UPDATE(3, '파이썬', '고연수');

-- DELETE 프로시저 테스트
EXEC PRC_ABLE_DELETE(8);        -- 없는 데이터
EXEC PRC_ABLE_DELETE(1);        -- 이미 사용 중인 데이터
EXEC PRC_ABLE_DELETE(5);

SELECT *
FROM TBL_ABLE;
SELECT *
FROM TBL_CLASS;
SELECT *
FROM TBL_PROFESSOR;



-- TBL_COURSE(과정) 생성 -------------------------------------------------------

CREATE TABLE TBL_COURSE 
( COURSE_CODE   NUMBER                                                          -- 과정코드 (PK)
, COURSE_NAME	VARCHAR2(50)    CONSTRAINT COURSE_COURSE_NAME_NN  NOT NULL      -- 과정명
, CONSTRAINT COURSE_COURSE_CODE_PK  PRIMARY KEY(COURSE_CODE)
);

-- COMMENT 추가
COMMENT ON TABLE TBL_COURSE IS '과정';

COMMENT ON COLUMN TBL_COURSE.COURSE_CODE IS '과정코드';
COMMENT ON COLUMN TBL_COURSE.COURSE_NAME IS '과정명';

-- 시퀀스 생성
CREATE SEQUENCE TBL_COURSE_SEQ
START WITH 1
INCREMENT BY 1 
NOMAXVALUE
NOCACHE;

-- INSERT 프로시저 테스트
EXEC PRC_COURSE_INSERT('풀스택 A');
EXEC PRC_COURSE_INSERT('풀스택 B');
EXEC PRC_COURSE_INSERT('백엔드 A');
EXEC PRC_COURSE_INSERT('백엔드 B');

EXEC PRC_COURSE_INSERT('TEST');             -- UPDATE 및 DELETE 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_COURSE_UPDATE(10, '풀스택 C');        -- 없는 데이터
EXEC PRC_COURSE_UPDATE(1, '풀스택 C');
EXEC PRC_COURSE_UPDATE(5, 'TEST2');

-- DELETE 프로시저 테스트
EXEC PRC_COURSE_UPDATE('TEST100');        -- 없는 데이터
EXEC PRC_COURSE_DELETE('풀스택 A');
EXEC PRC_COURSE_DELETE('TEST2');


SELECT *
FROM TBL_COURSE;
SELECT *
FROM TBL_GRADE;
SELECT *
FROM TBL_OCOURSE;
SELECT *
FROM TBL_OCLASS;

COMMIT;

-- TBL_CLASSROOM(강의실) 생성 --------------------------------------------------

CREATE TABLE TBL_CLASSROOM
( ROOM_CODE    NUMBER                                                           -- 강의실코드 (PK)
, ROOM_NAME    VARCHAR2(30)  CONSTRAINT CLASSROOM_ROOM_NAME_NN   NOT NULL       -- 강의실명
, ROOM_INWON   NUMBER(3)     CONSTRAINT CLASSROOM_ROOM_INWON_NN   NOT NULL      -- 강의실 수용 인원
, CONSTRAINT   CLASSROOM_ROOM_CODE_PK  PRIMARY KEY(ROOM_CODE)
);

-- COMMENT 추가
COMMENT ON TABLE TBL_CLASSROOM IS '강의실';

COMMENT ON COLUMN TBL_CLASSROOM.ROOM_CODE IS '강의실코드';
COMMENT ON COLUMN TBL_CLASSROOM.ROOM_NAME IS '강의실명';
COMMENT ON COLUMN TBL_CLASSROOM.ROOM_INWON IS '강의실 수용 인원';

-- 시퀀스 생성
CREATE SEQUENCE TBL_CLASSROOM_SEQ
START WITH 1
INCREMENT BY 1 
NOMAXVALUE
NOCACHE;

-- 데이터 INSERT
EXEC PRC_CLASSROOM_INSERT('1강의실', 100);
EXEC PRC_CLASSROOM_INSERT('2강의실', 100);
EXEC PRC_CLASSROOM_INSERT('3강의실', 100);
EXEC PRC_CLASSROOM_INSERT('4강의실', 100);
EXEC PRC_CLASSROOM_INSERT('5강의실', 100);

EXEC PRC_CLASSROOM_INSERT('6강의실', 100);     -- UPDATE 및 DELETE 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_CLASSROOM_UPDATE(6, 'A강의실', 50);   -- 없는 데이터
EXEC PRC_CLASSROOM_UPDATE(1, 'A강의실', 50);   -- 이미 사용 중인 데이터
EXEC PRC_CLASSROOM_INSERT('6강의실', 50);

-- DELETE 프로시저 테스트
EXEC PRC_CLASSROOM_DELETE('6강의실');

SELECT *
FROM TBL_CLASSROOM;
SELECT *
FROM TBL_OCOURSE;



-- TBL_OCOURSE(개설과정) 생성 --------------------------------------------------

CREATE TABLE TBL_OCOURSE
( OCOURSE_CODE  NUMBER                                                                              -- 개설과정코드 (PK)
, START_DATE    DATE            CONSTRAINT OCOURSE_START_DATE_NN   NOT NULL                         -- 과정 시작일
, END_DATE      DATE            CONSTRAINT OCOURSE_END_DATE_NN NOT NULL                             -- 과정 종료일
, INSERT_DATE   DATE            DEFAULT SYSDATE CONSTRAINT OCOURSE_INSERT_DATE_NN NOT NULL          -- 개설일자     
, COURSE_CODE   NUMBER        CONSTRAINT OCOURSE_COURSE_CODE_NN NOT NULL                            -- 과정코드 (FK : TBL_CLASSROOM)
, ROOM_CODE     NUMBER        CONSTRAINT OCOURSE_ROOM_CODE_NN NOT NULL                              -- 강의실코드 (FK : TBL_COURSE)
, CONSTRAINT OCOURSE_OCOURSE_CODE_PK  PRIMARY KEY(OCOURSE_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_OCOURSE
ADD ( CONSTRAINT OCOURSE_ROOM_CODE_FK FOREIGN KEY(ROOM_CODE)
                REFERENCES TBL_CLASSROOM(ROOM_CODE)
    , CONSTRAINT OCOURSE_COURSE_CODE_FK FOREIGN KEY(COURSE_CODE)
                REFERENCES TBL_COURSE(COURSE_CODE) );
                
-- 시퀀스 생성
CREATE SEQUENCE TBL_OCOURSE_SEQ
START WITH 1
INCREMENT BY 1
NOMAXVALUE
NOCACHE;

-- COMMENT 추가
COMMENT ON TABLE TBL_OCOURSE IS '개설과정';

COMMENT ON COLUMN TBL_OCOURSE.OCOURSE_CODE IS '개설과정코드';
COMMENT ON COLUMN TBL_OCOURSE.START_DATE IS '과정 시작일';
COMMENT ON COLUMN TBL_OCOURSE.END_DATE IS '과정 종료일';
COMMENT ON COLUMN TBL_OCOURSE.INSERT_DATE IS '개설일자';
COMMENT ON COLUMN TBL_OCOURSE.COURSE_CODE IS '과정.과정코드 참조키';
COMMENT ON COLUMN TBL_OCOURSE.ROOM_CODE IS '강의실.강의실코드 참조키';

-- INSERT 프로시저 테스트
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-06-01','YYYY-MM-DD'), TO_DATE('2022-06-30','YYYY-MM-DD'), 1, 1);
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-07-01','YYYY-MM-DD'), TO_DATE('2022-07-30','YYYY-MM-DD'), 2, 2);
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-08-01','YYYY-MM-DD'), TO_DATE('2022-08-30','YYYY-MM-DD'), 3, 3);
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-09-01','YYYY-MM-DD'), TO_DATE('2022-09-30','YYYY-MM-DD'), 4, 4);
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-09-01','YYYY-MM-DD'), TO_DATE('2022-09-30','YYYY-MM-DD'), 4, 4);

    -- 트리거 및 프로시저 테스트용 데이터
EXEC PRC_OCOURSE_INSERT(TO_DATE('2022-10-01','YYYY-MM-DD'), TO_DATE('2023-09-30','YYYY-MM-DD'), 4, 4); 
EXEC PRC_OCOURSE_INSERT(TO_DATE('2023-11-01','YYYY-MM-DD'), TO_DATE('2023-11-30','YYYY-MM-DD'), 5, 4);

-- UPDATE 프로시저 테스트
EXEC PRC_OCOURSE_UPDATE(5, TO_DATE('2022-09-20', 'YYYY-MM-DD'), TO_DATE('2022-10-20'), 4, 2);       -- 이미 진행 중인 과정
EXEC PRC_OCOURSE_UPDATE(10, TO_DATE('2022-09-20', 'YYYY-MM-DD'), TO_DATE('2022-10-20'), 4, 2);      -- 없는 데이터
EXEC PRC_OCOURSE_UPDATE(6, TO_DATE('2022-10-10', 'YYYY-MM-DD'), TO_DATE('2022-10-20'), 4, 2);

-- DELETE 프로시저 테스트
EXEC PRC_OCOURSE_DELETE(6);
EXEC PRC_OCOURSE_DELETE(7);     -- 트리거 테스트용

SELECT *
FROM TBL_OCOURSE;
SELECT *
FROM TBL_OCLASS;
SELECT *
FROM TBL_COURSE;


-- TBL_TEXTBOOK(교재) 생성 ----------------------------------------------------- 

CREATE TABLE TBL_TEXTBOOK
( BOOK_CODE     NUMBER                                                          -- 교재 코드 (PK)
, BOOK_NAME     VARCHAR2(20)    CONSTRAINT TEXTBOOK_BOOK_NAME_NN NOT NULL       -- 교재명
, BOOK_PUB      VARCHAR2(20)                                                    -- 출판사
, CONSTRAINT TEXTBOOK_BOOK_CODE_PK PRIMARY KEY(BOOK_CODE)
);

-- 시퀀스 생성
CREATE SEQUENCE TBL_TEXTBOOK_SEQ
NOCACHE;

-- COMMENT 추가
COMMENT ON TABLE TBL_TEXTBOOK IS '교재 테이블';

COMMENT ON COLUMN TBL_TEXTBOOK.BOOK_CODE IS '교재코드';
COMMENT ON COLUMN TBL_TEXTBOOK.BOOK_NAME IS '교재명';
COMMENT ON COLUMN TBL_TEXTBOOK.BOOK_PUB IS '출판사.';

-- INSERT 프로시저 테스트
EXEC PRC_TEXTBOOK_INSERT('교재 없음', NULL);       -- 멀쩡한 데이터
EXEC PRC_TEXTBOOK_INSERT('DB', '농협');            -- 멀쩡한 데이터
EXEC PRC_TEXTBOOK_INSERT('DB', '농협');            -- 중복 데이터 테스트

    -- 트리거 및 프로시저 테스트용 데이터
EXEC PRC_TEXTBOOK_INSERT('자바', NULL);
EXEC PRC_TEXTBOOK_INSERT('오라클', NULL);

-- UPDATE 프로시저 테스트
EXEC PRC_TEXTBOOK_UPDATE(3, '자바', '책과 사람');
EXEC PRC_TEXTBOOK_UPDATE(4, '자바', '책과 사람');     -- 없는 데이터

-- DELETE 프로시저 테스트
EXEC PRC_TEXTBOOK_DELETE(4);

SELECT *
FROM TBL_TEXTBOOK;

COMMIT;


-- TBL_OCLASS(개설 과목) 생성 --------------------------------------------------

CREATE TABLE TBL_OCLASS
( OCLASS_CODE   NUMBER                                                                          -- 개설과목 코드 (PK)
, START_DATE    DATE        CONSTRAINT OCLASS_START_DATE_NN NOT NULL                            -- 과목 시작일
, END_DATE      DATE        CONSTRAINT OCLASS_END_DATE_NN NOT NULL                              -- 과목 종료일        
, INSERT_DATE   DATE        DEFAULT SYSDATE    CONSTRAINT OCLASS_INSERT_DATE_NN NOT NULL        -- 개설일자
, ABLE_CODE     NUMBER      CONSTRAINT OCLASS_ABLE_CODE_NN NOT NULL                             -- 강의 가능 여부 코드 (FK : TBL_ABLE)
, OCOURSE_CODE  NUMBER      CONSTRAINT OCLASS_OCOURSE_CODE_NN NOT NULL                          -- 개설과정 코드 (FK : TBL_OCOURSE)
, BOOK_CODE     NUMBER      CONSTRAINT OCLASS_BOOK_CODE_NN NOT NULL                             -- 교재 코드 (FK : TBL_TEXTBOOK)
, CONSTRAINT OCLASS_OCLASS_CODE_PK PRIMARY KEY(OCLASS_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_OCLASS
ADD CONSTRAINT OCLASS_ABLE_V_FK FOREIGN KEY(ABLE_CODE)
                    REFERENCES TBL_ABLE(ABLE_CODE);

ALTER TABLE TBL_OCLASS
ADD CONSTRAINT OCLASS_OCOURSE_CODE_FK FOREIGN KEY(OCOURSE_CODE)
                    REFERENCES TBL_OCOURSE(OCOURSE_CODE);

ALTER TABLE TBL_OCLASS
ADD CONSTRAINT OCLASS_BOOK_CODE_FK FOREIGN KEY(BOOK_CODE)
                    REFERENCES TBL_TEXTBOOK(BOOK_CODE);
                    
-- 시퀀스 추가
CREATE SEQUENCE TBL_OCLASS_SEQ
NOCACHE;
                    
-- COMMENT 추가
COMMENT ON TABLE TBL_OCLASS IS '개설과목 테이블';

COMMENT ON COLUMN TBL_OCLASS.OCLASS_CODE IS '개설과목 코드';
COMMENT ON COLUMN TBL_OCLASS.START_DATE IS '과목 시작일';
COMMENT ON COLUMN TBL_OCLASS.END_DATE IS '과목 종료일';
COMMENT ON COLUMN TBL_OCLASS.INSERT_DATE IS '개설 일자';
COMMENT ON COLUMN TBL_OCLASS.ABLE_CODE IS '강의 가능 여부 코드';
COMMENT ON COLUMN TBL_OCLASS.OCOURSE_CODE IS '개설과정 코드';
COMMENT ON COLUMN TBL_OCLASS.BOOK_CODE IS '교재 코드';

SELECT *
FROM TBL_OCOURSE;

-- INSERT 테스트
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-05-25', 'YYYY-MM-DD'), TO_DATE('2022-06-30', 'YYYY-MM-DD'), 1, 1, 1);   
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-06-01', 'YYYY-MM-DD'), TO_DATE('2023-06-01', 'YYYY-MM-DD'), 1, 1, 1);   
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-05-25', 'YYYY-MM-DD'), TO_DATE('2023-06-01', 'YYYY-MM-DD'), 1, 1, 1);   
--> 개설과정보다 더 큰 범위의 개설과목 날짜 넣을 때
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-06-02', 'YYYY-MM-DD'), TO_DATE('2022-06-30', 'YYYY-MM-DD'), 1, 1, 1);   
--> 개설일자보다 빠른 시작일
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-06-02', 'YYYY-MM-DD'), TO_DATE('2022-06-01', 'YYYY-MM-DD'), 2, 1, 1);   
--> 개설일자보다 빠른 종료일
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-12-25', 'YYYY-MM-DD'), TO_DATE('2022-11-01', 'YYYY-MM-DD'), 2, 1, 1);   
--> 시작일보다 빠른 종료일
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), TO_DATE('2022-09-30', 'YYYY-MM-DD'), 1, 5, 100);   
--> 없는 교재 데이터
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), TO_DATE('2022-09-30', 'YYYY-MM-DD'), 100, 5, 1);   
--> 강의 가능한 데이터가 없는 경우
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-30', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'), 3, 5, 1);   
--> 개설과목이 있는 A교수를 배정받은 날짜와 같은 날짜로 넣기
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-30', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'), 3, 5, 1);   
--> 개설과목이 있는 A교수를 배정받은 날짜 사이의 날짜로 넣기
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-29', 'YYYY-MM-DD'), TO_DATE('2022-10-02', 'YYYY-MM-DD'), 3, 5, 1);   
--> 개설과목이 있는 A교수를 배정받은 날짜를 덮는 더 큰 날짜로 넣기
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-30', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'), 3, 5, 1);  
--> 멀쩡한 데이터
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-09-30', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'), 1, 5, 1);  
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-10-02', 'YYYY-MM-DD'), TO_DATE('2022-10-20', 'YYYY-MM-DD'), 1, 6, 1);  

-- UPDATE
EXEC PRC_OCLASS_UPDATE(TO_DATE('2022-05-25', 'YYYY-MM-DD'), TO_DATE('2023-06-01', 'YYYY-MM-DD'), 1, 1, 1);          -- 개설과정보다 더 큰 범위의 개설과목 날짜
EXEC PRC_OCLASS_UPDATE(TO_DATE('2022-11-01', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'), 1, 6, 100);        -- 없는 교재
EXEC PRC_OCLASS_UPDATE(TO_DATE('2022-11-01', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'), 100, 6, 1);        -- 없는 강의 가능 코드
EXEC PRC_OCLASS_UPDATE(TO_DATE('2022-09-30', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'), 2, 5, 1);          -- 교수 중복
EXEC PRC_OCLASS_UPDATE(TO_DATE('2022-11-01', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'), 1, 6, 1);

-- DELETE 테스트
EXEC PRC_OCLASS_DELETE(3);

SELECT *
FROM TBL_OCLASS;
SELECT *
FROM TBL_POINT;


-- TBL_STUDENT(학생) 생성 ------------------------------------------------------

CREATE TABLE TBL_STUDENT 
( STU_ID	    VARCHAR2(30)	                                                            -- 학생 아이디 (PK)
, STU_NAME	    VARCHAR2(30)	    CONSTRAINT STUDENT_STU_NAME_NN NOT NULL                 -- 학생명
, STU_PW	    VARCHAR2(15)	CONSTRAINT STUDENT_STU_PW_NN NOT NULL                   -- 학생 비밀번호
, STU_SSN	    CHAR(14)        CONSTRAINT STUDENT_STU_SSN_NN NOT NULL                  -- 주민등록번호
, STU_EMAIL	    VARCHAR2(30)	                                                            -- 학생 이메일
, STU_PHONE	    VARCHAR2(20)	                                                            -- 학생 전화번호
, STU_DATE	    DATE    DEFAULT SYSDATE     CONSTRAINT STUDENT_STU_DATE_NN NOT NULL     -- 학생 가입날짜
, CONSTRAINT STUDENT_STU_ID_PK PRIMARY KEY(STU_ID)
);

-- UK 제약조건 추가
ALTER TABLE TBL_STUDENT
ADD CONSTRAINT STUDENT_STU_SSN_UK UNIQUE(STU_SSN);

-- COMMENT 추가
COMMENT ON TABLE TBL_STUDENT IS '학생테이블';

COMMENT ON COLUMN TBL_STUDENT.STU_ID IS '학생 아이디';
COMMENT ON COLUMN TBL_STUDENT.STU_NAME IS '학생 이름';
COMMENT ON COLUMN TBL_STUDENT.STU_PW IS '학생 비밀번호';
COMMENT ON COLUMN TBL_STUDENT.STU_SSN IS '주민등록번호';
COMMENT ON COLUMN TBL_STUDENT.STU_EMAIL IS '학생 이메일';
COMMENT ON COLUMN TBL_STUDENT.STU_PHONE IS '학생 전화번호';
COMMENT ON COLUMN TBL_STUDENT.STU_DATE IS '학생 가입날짜';

-- INSERT 프로시저 테스트
EXEC PRC_STUDENT_INSERT('ID1', '김인교', '990325-2111111', 'a@naver.com',  '010-1111-1111');
EXEC PRC_STUDENT_INSERT('ID2', '민찬우', '930325-1111111', 'b@naver.com',  '010-1111-1112');
EXEC PRC_STUDENT_INSERT('ID3', '유동현', '990325-1111112', 'c@naver.com',  '010-1111-1113');
EXEC PRC_STUDENT_INSERT('ID4', '김태민', '990326-2111111', 'd@naver.com',  '010-1111-1114');
EXEC PRC_STUDENT_INSERT('ID6', '고연수', '940326-2111111', 'd@naver.com',  '010-1111-1114');

EXEC PRC_STUDENT_INSERT('ID5', '고연수', '940325-2111111', 'd@naver.com',  '010-1111-1114');       -- DELETE 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_STUDENT_UPDATE('ID8', '1111111', '김인교', '990325-2111111', '', '010-1111-1111');        -- 없는 데이터
EXEC PRC_STUDENT_UPDATE('ID8', '1111111', '김인교', '930325-2111111', '', '010-1111-1111');        -- 중복 ssn
EXEC PRC_STUDENT_UPDATE('ID1', '1111111', '김인교', '990325-2111111', '', '010-1111-1111');

-- DELETE 프로시저 테스트
EXEC PRC_STUDENT_DELETE('ID5');

SELECT *
FROM TBL_STUDENT;


-- TBL_REASON(탈락 사유) 생성 --------------------------------------------------

CREATE TABLE TBL_REASON         
( REASON_CODE  NUMBER                                                           -- 탈락 사유 코드(PK)
, REASON_MEMO   VARCHAR2(50)    CONSTRAINT REASON_REASON_MEMO_NN NOT NULL       -- 탈락 사유
, CONSTRAINT REASON_REASON_CODE_PK PRIMARY KEY(REASON_CODE)
);

-- COMMENT 추가
COMMENT ON TABLE TBL_REASON IS '탈락 사유 테이블';
COMMENT ON COLUMN TBL_REASON.REASON_CODE IS '탈락 사유 코드';
COMMENT ON COLUMN TBL_REASON.REASON_MEMO IS '탈락 사유';


-- 시퀀스 생성 - 기본 값으로 작성
CREATE SEQUENCE TBL_REASON_SEQ
START WITH 1                       -- 시작값
INCREMENT BY 1
NOMAXVALUE 
NOCACHE;

-- INSERT 프로시저 테스트
EXEC PRC_REASON_INSERT('탈주'); 
EXEC PRC_REASON_INSERT('탈주');         -- 중복데이터
EXEC PRC_REASON_INSERT('포기');  
EXEC PRC_REASON_INSERT('진로변경'); 
EXEC PRC_REASON_INSERT('태도불량'); 
EXEC PRC_REASON_INSERT('취업');
EXEC PRC_REASON_INSERT('성적미달');

EXEC PRC_REASON_INSERT('태도불량');     -- DELETE 프로시저 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_REASON_UPDATE(8, '태도불량');      -- 없는 데이터
EXEC PRC_REASON_UPDATE(4, '출석미달');

-- DELETE 프로시저 테스트
EXEC PRC_REASON_DELETE(8);              -- 없는 데이터
EXEC PRC_REASON_DELETE(6);

SELECT *
FROM TBL_REASON;

COMMIT;


-- TBL_SIGN(수강신청) 생성 -----------------------------------------------------

CREATE TABLE TBL_SIGN
( SIGN_CODE     NUMBER                                                                    -- 수강신청 코드(PK)
, SIGN_DATE     DATE            DEFAULT SYSDATE CONSTRAINT SIGN_SIGN_DATE_NN NOT NULL     -- 탈락 일자
, STU_ID        VARCHAR2(10)    CONSTRAINT SIGN_STU_ID_NN NOT NULL                        -- 수강신청 코드(FK: TBL_STUDENT)
, OCOURSE_CODE  NUMBER          CONSTRAINT SIGN_OCOURSE_CODE_NN NOT NULL                    -- 개설과정 코드(FK: TBL_OCOURSE)
, CONSTRAINT SIGN_SIGN_CODE_PK PRIMARY KEY(SIGN_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_SIGN
ADD ( CONSTRAINT SIGN_STU_ID_FK FOREIGN KEY(STU_ID)
                 REFERENCES TBL_STUDENT(STU_ID)
    , CONSTRAINT SIGN_OCOURSE_CODE_FK FOREIGN KEY(OCOURSE_CODE)
                 REFERENCES TBL_OCOURSE(OCOURSE_CODE) );

-- COMMENT 추가
COMMENT ON TABLE TBL_SIGN IS '수강신청 테이블';

COMMENT ON COLUMN TBL_SIGN.SIGN_CODE IS '수강신청 코드';
COMMENT ON COLUMN TBL_SIGN.SIGN_DATE IS '수강신청 날짜';
COMMENT ON COLUMN TBL_SIGN.STU_ID IS '학생 아이디';
COMMENT ON COLUMN TBL_SIGN.OCOURSE_CODE IS '개설과정 코드';


-- 시퀀스 생성
CREATE SEQUENCE TBL_SIGN_SEQ
START WITH 1
INCREMENT BY 1
NOMAXVALUE 
NOCACHE;


-- INSERT 프로시저 테스트
EXEC PRC_SIGN_INSERT('ID1', 5); 
EXEC PRC_SIGN_INSERT('ID2', 5); 
EXEC PRC_SIGN_INSERT('ID3', 5);   
EXEC PRC_SIGN_INSERT('ID4', 5);   
EXEC PRC_SIGN_INSERT('ID5', 5);
EXEC PRC_SIGN_INSERT('ID6', 5);         -- 없는 데이터

EXEC PRC_SIGN_INSERT('ID7', 5);         -- UPDATE 및 DELETE 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_SIGN_UPDATE(1, 'ID1', 4);      -- 이미 진행 중인 과정
EXEC PRC_SIGN_UPDATE(5, 'ID6', 5);      -- 학생 데이터 추가 후 업데이트

-- DELETE 프로시저 테스트
EXEC PRC_SIGN_DELETE(1);            -- 성적이 이미 입력된 학생
EXEC PRC_SIGN_DELETE(8);            -- 없는 데이터
EXEC PRC_SIGN_DELETE(6);


SELECT *
FROM TBL_SIGN;
SELECT *
FROM TBL_OCOURSE;
SELECT *
FROM TBL_GRADE;



-- TBL_FAIL(중도 탈락) 생성 ----------------------------------------------------

CREATE TABLE TBL_FAIL
( FAIL_CODE     NUMBER                                                                      -- 중도 탈락 코드(PK)                
, FAIL_DATE     DATE          CONSTRAINT FAIL_FAIL_DATE_NN NOT NULL                         -- 탈락 일자
, SIGN_CODE     NUMBER        CONSTRAINT FAIL_SIGN_CODE_NN NOT NULL                         -- 수강신청 코드(FK: TBL_SIGN)
, REASON_CODE   NUMBER        CONSTRAINT FAIL_REASON_CODE_NN NOT NULL                       -- 탈락 사유 코드(FK: TBL_REASON)
, CONSTRAINT FAIL_FAIL_CODE_PK PRIMARY KEY(FAIL_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_FAIL
ADD ( CONSTRAINT FAIL_FAIL_CODE_FK FOREIGN KEY(SIGN_CODE)
                 REFERENCES TBL_SIGN(SIGN_CODE)
    , CONSTRAINT FAIL_REASON_CODE_FK FOREIGN KEY(REASON_CODE)
                 REFERENCES TBL_REASON(REASON_CODE) );

-- COMMENT 추가
COMMENT ON TABLE TBL_FAIL IS '중도 탈락 테이블';

COMMENT ON COLUMN TBL_FAIL.FAIL_CODE IS '중도 탈락 코드';
COMMENT ON COLUMN TBL_FAIL.FAIL_DATE IS '탈락 일자';
COMMENT ON COLUMN TBL_FAIL.SIGN_CODE IS '수강신청 코드';
COMMENT ON COLUMN TBL_FAIL.REASON_CODE IS '탈락 사유 코드';

-- 시퀀스 생성
CREATE SEQUENCE TBL_FAIL_SEQ
START WITH 1
INCREMENT BY 1
NOMAXVALUE 
NOCACHE;

-- INSERT 프로시저 테스트
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 1, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 2, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 3, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 4, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 5, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 5, 5);        -- 중복 데이터

    -- 트리거 및 프로시저 테스트용 데이터
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 5, 5);
EXEC PRC_FAIL_INSERT(TO_DATE('2022-09-14', 'YYYY-MM-DD'), 5, 5);

-- UPDATE 프로시저 테스트
EXEC PRC_FAIL_UPDATE(1, TO_DATE('2022-09-15', 'YYYY-MM-DD'), 100, 5);         -- 없는 수강신청 데이터
EXEC PRC_FAIL_UPDATE(1, TO_DATE('2022-09-15', 'YYYY-MM-DD'), 1, 100);         -- 없는 이유 데이터
EXEC PRC_FAIL_UPDATE(1, TO_DATE('2022-09-15', 'YYYY-MM-DD'), 1, 5);

-- DELETE 프로시저 테스트
EXEC PRC_FAIL_DELETE(100);      -- 없는 데이터
EXEC PRC_FAIL_DELETE(4);
EXEC PRC_FAIL_DELETE(5);

SELECT *
FROM TBL_FAIL;
SELECT *
FROM TBL_OCLASS;
SELECT *
FROM TBL_SIGN;



-- TBL_POINT(배점) 생성 --------------------------------------------------------

CREATE TABLE TBL_POINT
( POINT_CODE        NUMBER                                                                  -- 배점코드 (PK)
, POINT_ATTEND      NUMBER(3)       CONSTRAINT POINT_POINT_ATTEND_NN NOT NULL               -- 출결 배점 
, POINT_PRACTICE    NUMBER(3)       CONSTRAINT POINT_POINT_PRACTICE_NN NOT NULL             -- 실기 배점
, POINT_WRITE       NUMBER(3)       CONSTRAINT POINT_POINT_WRITE_NN NOT NULL                -- 필기 배점
, OCLASS_CODE       NUMBER          CONSTRAINT POINT_OCLASS_CODE_NN NOT NULL                -- 개설과목 코드 (FK : TBL_OCLASS)
, CONSTRAINT POINT_POINT_CODE_PK PRIMARY KEY(POINT_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_POINT
ADD CONSTRAINT POINT_OCLASS_CODE_FK FOREIGN KEY(OCLASS_CODE)
                    REFERENCES TBL_OCLASS(OCLASS_CODE);
                    
-- 시퀀스 생성
CREATE SEQUENCE TBL_POINT_SEQ
NOCACHE;
                    
-- COMMENT 추가
COMMENT ON TABLE TBL_POINT IS '배점 테이블';

COMMENT ON COLUMN TBL_POINT.POINT_CODE IS '배점 코드';
COMMENT ON COLUMN TBL_POINT.POINT_ATTEND IS '출결'; 
COMMENT ON COLUMN TBL_POINT.POINT_PRACTICE IS '실기'; 
COMMENT ON COLUMN TBL_POINT.POINT_WRITE IS '필기'; 
COMMENT ON COLUMN TBL_POINT.OCLASS_CODE IS '개설과목 코드';

-- INSERT 프로시저 테스트
EXEC PRC_POINT_INSERT(0,0,0,100);         -- 없는데이터 
EXEC PRC_POINT_INSERT(20, 20, 60, 1);     -- 중복데이터 
EXEC PRC_POINT_INSERT(-1, 60, 20, 2);     -- 출석 음수
EXEC PRC_POINT_INSERT(20, -1, 60, 2);     -- 실기 음수 
EXEC PRC_POINT_INSERT(20, 60, -1, 2);     -- 필기 음수 
EXEC PRC_POINT_INSERT(100, 100, 100, 2);  -- 총합 100 이상 
EXEC PRC_POINT_INSERT(1, 1, 1, 2);        -- 총합 100 이하 
EXEC PRC_POINT_INSERT(20, 20, 60, 2);     -- 멀쩡한 데이터 
EXEC PRC_POINT_INSERT(0, 0, 0, 2);       -- 0이 들어가는 멀쩡한 데이터

EXEC PRC_POINT_INSERT(40, 10, 50, 2);     -- 테스트용 데이터

-- UPDATE 프로시저 테스트
EXEC PRC_POINT_UPDATE(10, 20, 20, 60);      -- 없는 데이터
EXEC PRC_POINT_UPDATE(3, 20, 20, 70);       -- 총합 100 초과
EXEC PRC_POINT_UPDATE(3, 20, 20, 40);       -- 총합 100 미만
EXEC PRC_POINT_UPDATE(3, -1, 20, 60);       -- 음수
EXEC PRC_POINT_UPDATE(3, 20, 20, 60);

-- DELETE 프로시저 테스트
EXEC PRC_POINT_DELETE(10);          -- 없는 데이터
EXEC PRC_POINT_DELETE(2);

SELECT *
FROM TBL_POINT;


-- TBL_GRADE(성적) 생성 --------------------------------------------------------

CREATE TABLE TBL_GRADE
( GRADE_CODE        NUMBER  	                                                -- 성적코드 (PK)
, GRADE_ATTEND	    NUMBER(3)	                                                -- 출결
, GRADE_PRACTICE	NUMBER(3)	                                                -- 실기
, GRADE_WRITE	    NUMBER(3)	                                                -- 필기
, OCLASS_CODE       NUMBER  	    CONSTRAINT GRADE_OCLASS_CODE_NN NOT NULL    -- 개설과목 코드 (FK : TBL_OCLASS)                
, SIGN_CODE	        NUMBER  	    CONSTRAINT GRADE_SIGN_CODE_NN NOT NULL      -- 수강신청 코드 (FK : TBL_SIGN)
, CONSTRAINT GRADE_GRADE_CODE_PK PRIMARY KEY(GRADE_CODE)
);

-- FK 제약조건 추가
ALTER TABLE TBL_GRADE 
ADD ( CONSTRAINT GRADE_OCLASS_CODE_FK FOREIGN KEY(OCLASS_CODE) 
                                       REFERENCES  TBL_OCLASS(OCLASS_CODE)
    , CONSTRAINT GRADE_SIGN_CODE_FK  FOREIGN KEY(SIGN_CODE)
                                       REFERENCES TBL_SIGN(SIGN_CODE) );

-- COMMENT 추가
COMMENT ON TABLE TBL_GRADE IS '성적 테이블';

COMMENT ON COLUMN TBL_GRADE.GRADE_CODE IS '성적코드';
COMMENT ON COLUMN TBL_GRADE.GRADE_ATTEND IS '출결';
COMMENT ON COLUMN TBL_GRADE.GRADE_PRACTICE IS '실기';
COMMENT ON COLUMN TBL_GRADE.GRADE_WRITE IS '필기';
COMMENT ON COLUMN TBL_GRADE.OCLASS_CODE IS '개설과목 코드';
COMMENT ON COLUMN TBL_GRADE.SIGN_CODE IS '수강신청 코드';

-- INSERT 프로시저 테스트
EXEC PRC_GRADE_INSERT(100, 90, 60, 1, 1);
EXEC PRC_GRADE_INSERT(90, 90, 60, 2, 2);
EXEC PRC_GRADE_INSERT(100, 90, 70, 1, 3);
EXEC PRC_GRADE_INSERT(80, 60, 60, 1, 4);
EXEC PRC_GRADE_INSERT(80, 60, 60, 1, 4);        -- 이미 성적이 입력된 데이터
EXEC PRC_GRADE_INSERT(-1, 60, 60, 1, 4);        -- 음수
EXEC PRC_GRADE_INSERT(-1, 60, 60, 1, 10);       -- 없는 수강신청 코드
EXEC PRC_GRADE_INSERT(-1, 60, 60, 10, 4);       -- 없는 개설 과목 코드
EXEC PRC_GRADE_INSERT(100, 100, 100, 2, 1);     -- 아직 수료하지 않은 과목 코드
EXEC PRC_GRADE_INSERT(40, 20, 100, 2, 5);       -- 점수미달 중도탈락 테스트

-- UPDATE 프로시저 테스트
EXEC PRC_GRADE_UPDATE(5, 100, 100, 100);        -- 없는 데이터
EXEC PRC_GRADE_UPDATE(1, 100, 100, 100);

-- DELETE 프로시저 테스트
EXEC PRC_GRADE_DELETE(9);       -- 없는 데이터
EXEC PRC_GRADE_DELETE(4);


SELECT *
FROM TBL_GRADE;
SELECT *
FROM TBL_OCLASS;

SELECT *
FROM TBL_FAIL;

SELECT *
FROM TBL_SIGN;

DELETE
FROM TBL_FAIL
WHERE FAIL_CODE = 7;

ROLLBACK;









