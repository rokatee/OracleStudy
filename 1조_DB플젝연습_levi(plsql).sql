SELECT USER
FROM DUAL;
--==>> LEVI

SET SERVEROUTPUT ON;

-- 오류 메시지 목록
/*
-20001, '데이터 중복'
-20002, '데이터 없음'
-20003, '유효하지 않은 데이터'
-20004, '총합 100점이 되어야 합니다'
*/

--DROP SEQUENCE TBL_CLASS_SEQ;
--
--CREATE SEQUENCE TBL_CLASS_SEQ
--NOCACHE;

--------------------------------------------------------------------------------
--과목
-------------------
-- PRC_CLASS_INSERT
SELECT *
FROM TBL_CLASS;

--EXEC PRC_CLASS_INSERT(CLASS_NAME);
EXEC PRC_CLASS_INSERT('Java');   -- 중복 데이터 테스트 
EXEC PRC_CLASS_INSERT('WOW');    -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_CLASS_INSERT
(
   V_CLASS_NAME    IN TBL_CLASS.CLASS_NAME%TYPE
)
IS
    V_CLASS_CODE        TBL_CLASS.CLASS_CODE%TYPE;
    V_FLAT              NUMBER := 1;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_CLASS
    WHERE CLASS_NAME = V_CLASS_NAME;
    
    IF (V_FLAT = 1)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    INSERT INTO TBL_CLASS(CLASS_CODE, CLASS_NAME)
    VALUES(TBL_CLASS_SEQ.NEXTVAL, V_CLASS_NAME);
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '데이터 중복');

END;

--------------------
-- PRC_CLASS_UPDATE
SELECT *
FROM TBL_CLASS;

--EXEC PRC_CLASS_UPDATE(CLASS_CODE, CLASS_NAME);
EXEC PRC_CLASS_UPDATE(100, '없는데이터');   -- 없는데이터
EXEC PRC_CLASS_UPDATE(3, 'WWW');            -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_CLASS_UPDATE
(
    V_CLASS_CODE    IN TBL_CLASS.CLASS_CODE%TYPE
,   V_CLASS_NAME    IN TBL_CLASS.CLASS_NAME%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_CLASS
    WHERE CLASS_CODE = V_CLASS_CODE;
    
    IF(V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    UPDATE TBL_CLASS
    SET CLASS_NAME = V_CLASS_NAME
    WHERE CLASS_CODE = V_CLASS_CODE;
    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');

END;

------------------
--PRC_CLASS_DELETE
SELECT *
FROM TBL_CLASS;

--EXEC PRC_CLASS_DELETE(CLASS_CODE);
EXEC PRC_CLASS_DELETE(100);   -- 없는데이터
EXEC PRC_CLASS_DELETE(3);     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_CLASS_DELETE
(
    V_CLASS_CODE    IN TBL_CLASS.CLASS_CODE%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_CLASS
    WHERE CLASS_CODE = V_CLASS_CODE;
    
    IF(V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    DELETE 
    FROM TBL_CLASS
    WHERE CLASS_CODE = V_CLASS_CODE;

    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');

END;

--------------------------------------------------------------------------------
--교수
-----------------
--PRC_PRO_INSERT        --> 초기 비번을 주민번호 뒷자리로, 암호화도
SELECT *
FROM TBL_PROFESSOR;

--EXEC PRC_PRO_INSERT(PRO_ID, PRO_NAME, PRO_PW, PRO_SSN, PRO_EMAIL, PRO_PHONE, PRO_DATE);
EXEC PRC_PRO_INSERT('pro1', '교수5', '5555555', '555555-5555555', 'pro5@gmail.com', '010-5555-5555'); --교수 아이디 중복
EXEC PRC_PRO_INSERT('pro5', '교수1', '5555555', '555555-5555555', 'pro5@gmail.com', '010-5555-5555'); --교수명
EXEC PRC_PRO_INSERT('pro5', '교수5', '5555555', '901010-1234567', 'pro5@gmail.com', '010-5555-5555'); --교수 주민번호
EXEC PRC_PRO_INSERT('pro5', '교수5', '5555555', '555555-5555555', 'pro1@gmail.com', '010-5555-5555'); --교수 이메일
EXEC PRC_PRO_INSERT('pro5', '교수5', '5555555', '555555-5555555', 'pro5@gmail.com', '010-1234-5678'); --교수 폰번호
--> 중복 데이터 테스트 
EXEC PRC_PRO_INSERT('pro3', '교수3', '3334567', '921010-3334567', 'pro3@gmail.com', '010-3334-5678');    
EXEC PRC_PRO_INSERT('pro4', '교수4', '4444567', '931010-3334567', NULL, NULL);    
--> 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_PRO_INSERT
(
   V_PRO_ID      IN TBL_PROFESSOR.PRO_ID%TYPE
,  V_PRO_NAME    IN TBL_PROFESSOR.PRO_NAME%TYPE
,  V_PRO_PW      IN TBL_PROFESSOR.PRO_PW%TYPE
,  V_PRO_SSN     IN TBL_PROFESSOR.PRO_SSN%TYPE
,  V_PRO_EMAIL   IN TBL_PROFESSOR.PRO_EMAIL%TYPE
,  V_PRO_PHONE   IN TBL_PROFESSOR.PRO_PHONE%TYPE
)
IS
    V_FLAT              NUMBER := 1;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    --중복 불허 : 교수 아이디, 교수명, 교수 주민번호, 교수 이메일, 교수 폰번호
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_PROFESSOR
    WHERE PRO_ID = V_PRO_ID
       OR PRO_NAME = V_PRO_NAME
       OR PRO_SSN = V_PRO_SSN
       OR PRO_EMAIL = V_PRO_EMAIL
       OR PRO_PHONE = V_PRO_PHONE;
    
    IF (V_FLAT = 1)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    INSERT INTO TBL_PROFESSOR(PRO_ID, PRO_NAME, PRO_PW, PRO_SSN, PRO_EMAIL, PRO_PHONE)
    VALUES(V_PRO_ID, V_PRO_NAME, V_PRO_PW, V_PRO_SSN, V_PRO_EMAIL, V_PRO_PHONE);
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '데이터 중복');

END;

--------------------
-- PRC_PRO_UPDATE  --> 수정시 수정시간도 데이터에서 띄워야할까?
                   --> 원하는 값만 바꾸려면 어떻게? EX. 비번만 바꾸거나, 이메일만 바꾸거나
SELECT *
FROM TBL_PROFESSOR;

DESC TBL_PROFESSOR;

--EXEC PRC_PRO_UPDATE(PRO_ID, PRO_PW, PRO_EMAIL, PRO_PHONE);
EXEC PRC_PRO_UPDATE('pro100', '5555555', 'pro5@gmail.com', '010-5555-5555');   -- 없는데이터
EXEC PRC_PRO_UPDATE('pro3', '5555555', 'pro5@gmail.com', '010-5555-5555');     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_PRO_UPDATE
(
   V_PRO_ID      IN TBL_PROFESSOR.PRO_ID%TYPE
,  V_PRO_PW      IN TBL_PROFESSOR.PRO_PW%TYPE
,  V_PRO_EMAIL   IN TBL_PROFESSOR.PRO_EMAIL%TYPE
,  V_PRO_PHONE   IN TBL_PROFESSOR.PRO_PHONE%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_PROFESSOR
    WHERE PRO_ID = V_PRO_ID;
    
    IF (V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    UPDATE TBL_PROFESSOR
    SET PRO_PW = V_PRO_PW
      , PRO_EMAIL = V_PRO_EMAIL
      , PRO_PHONE = V_PRO_PHONE
    WHERE PRO_ID = V_PRO_ID;
    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');

END;

------------------
--PRC_PRO_DELETE
SELECT *
FROM TBL_PROFESSOR;

--EXEC PRC_PRO_DELETE(PRO_ID);
EXEC PRC_PRO_DELETE('pro100');   -- 없는데이터
EXEC PRC_PRO_DELETE('pro3');     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_PRO_DELETE
(
   V_PRO_ID      IN TBL_PROFESSOR.PRO_ID%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_PROFESSOR
    WHERE PRO_ID = V_PRO_ID;
    
    IF(V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    DELETE 
    FROM TBL_PROFESSOR
    WHERE PRO_ID = V_PRO_ID;

    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');

END;

--------------------------------------------------------------------------------
--강의실


--------------------------------------------------------------------------------
--과정


--------------------------------------------------------------------------------
--교재
----------------------
--PRC_TEXTBOOK_INSERT
SELECT *
FROM TBL_TEXTBOOK;

--EXEC PRC_TEXTBOOK_INSERT(BOOK_NAME, BOOK_PUB);
EXEC PRC_TEXTBOOK_INSERT('Java', '홍대');   -- 중복 데이터 테스트
EXEC PRC_TEXTBOOK_INSERT('DB', '쌍용');     -- 멀쩡한 데이터
EXEC PRC_TEXTBOOK_INSERT('JS', NULL);     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_TEXTBOOK_INSERT
(
  V_BOOK_NAME   IN TBL_TEXTBOOK.BOOK_NAME%TYPE
, V_BOOK_PUB    IN TBL_TEXTBOOK.BOOK_PUB%TYPE 
)
IS
    V_BOOK_CODE         TBL_TEXTBOOK.BOOK_CODE%TYPE;
    V_FLAT              NUMBER := 1;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN

    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_TEXTBOOK
    WHERE BOOK_NAME = V_BOOK_NAME;
    
    IF (V_FLAT = 1)   
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    INSERT INTO TBL_TEXTBOOK(BOOK_CODE, BOOK_NAME, BOOK_PUB)
    VALUES(TBL_TEXTBOOK_SEQ.NEXTVAL, V_BOOK_NAME, V_BOOK_PUB);
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '데이터 중복');
--        WHEN OTHERS
--            THEN ROLLBACK;
--            
--    COMMIT;
    
END;

----------------------
--PRC_TEXTBOOK_UPDATE    --> 원하는 값만 바꾸려면 어떻게? EX. 책이름만 바꾸거나, 출판사만 바꾸거나
SELECT *
FROM TBL_TEXTBOOK;

--EXEC PRC_TEXTBOOK_UPDATE(BOOK_CODE, BOOK_NAME, BOOK_PUB);
EXEC PRC_TEXTBOOK_UPDATE(100, '없는 데이터', '없는 데이터');   -- 없는 데이터
EXEC PRC_TEXTBOOK_UPDATE(3, '알고리즘', '쌍용');               -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_TEXTBOOK_UPDATE
(
  V_BOOK_CODE   IN TBL_TEXTBOOK.BOOK_CODE%TYPE
, V_BOOK_NAME   IN TBL_TEXTBOOK.BOOK_NAME%TYPE
, V_BOOK_PUB    IN TBL_TEXTBOOK.BOOK_PUB%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_TEXTBOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    IF (V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    UPDATE TBL_TEXTBOOK
    SET BOOK_NAME = V_BOOK_NAME
      , BOOK_PUB = V_BOOK_PUB
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');
--        WHEN OTHERS
--            THEN ROLLBACK;
--    COMMIT;
END;

----------------------
--PRC_TEXTBOOK_DELETE
SELECT *
FROM TBL_TEXTBOOK;

--EXEC PRC_TEXTBOOK_DELETE(BOOK_CODE);
EXEC PRC_TEXTBOOK_DELETE(100);   -- 없는데이터
EXEC PRC_TEXTBOOK_DELETE(3);     -- 멀쩡한 데이터
EXEC PRC_TEXTBOOK_DELETE(4);     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_TEXTBOOK_DELETE
(
  V_BOOK_CODE   IN TBL_TEXTBOOK.BOOK_CODE%TYPE
)
IS
    V_FLAT          NUMBER := 1;
    NO_DATA_FOUND   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_TEXTBOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    IF(V_FLAT = 0)
        THEN RAISE NO_DATA_FOUND;
    END IF;
    
    DELETE 
    FROM TBL_TEXTBOOK
    WHERE BOOK_CODE = V_BOOK_CODE;

    
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');
--        WHEN OTHERS
--            THEN ROLLBACK;
--    COMMIT;
END;

--------------------------------------------------------------------------------
--개설과정(강의실, 과정)
---------------------
-- PRC_OCOURSE_INSERT


---------------------
-- PRC_OCOURSE_UPDATE


---------------------
-- PRC_OCOURSE_DELETE


--------------------------------------------------------------------------------
--강의가능(과목, 교수)
-- PRC_ABLE_INSERT
SELECT *
FROM TBL_ABLE;

--EXEC PRC_ABLE_INSERT()


CREATE OR REPLACE PROCEDURE PRC_ABLE_INSERT
( V_PRO_NAME        IN TBL_PRO.PRO_NAME%TYPE
, V_CLASS_NAME      IN TBL_CLASS.CLASS_NAME%TYPE
)
IS
    V_PRO_ID        TBL_PROFESSOR.PRO_ID%TYPE;
    V_CLASS_CODE    TBL_CLASS.CLASS_CODE%TYPE;
BEGIN
    
    SELECT PRO_ID INTO V_PRO_ID
    FROM TBL_PROFESSOR
    WHERE PRO_NAME = V_PRO_NAME;
    
    SELECT CLASS_CODE INTO V_CLASS_CODE
    FROM TBL_CLASS
    WHERE CLASS_NAME = V_CLASS_NAME;

    INSERT INTO TBL_ABLE(ABLE_CODE, PRO_CODE, CLASS_CODE)
    VALUES(TBL_ALBE_SEQ.NEXTVAL, V_PRO_CODE, V_CLASS_CODE);
    
--    COMMIT;

END;

--------------------------------------------------------------------------------
--개설과목[개설과정(강의실, 과정), 강의가능(과목, 교수)]
---------------------
-- PRC_OCLASS_INSERT
SELECT *
FROM TBL_OCLASS;

--EXEC PRC_OCLASS_INSERT(V_START_DATE, V_END_DATE, V_ABLE_CODE, V_OCOURSE_CODE, V_BOOK_CODE);
EXEC PRC_OCLASS_INSERT(TO_DATE('2022-06-27', 'YYYY-MM-DD'), TO_DATE('2023-01-16', 'YYYY-MM-DD') );   -- 멀쩡한 데이터 

CREATE OR REPLACE PROCEDURE PRC_OCLASS_INSERT
(
    V_START_DATE    IN TBL_OCLASS.OCLASS_START_DATE%TYPE
,   V_END_DATE      IN TBL_OCLASS.OCLASS_END_DATE%TYPE
)
IS
    V_OCLASS_CODE     TBL_OCLASS.OCLASS_CODE%TYPE;
    V_ABLE_CODE       TBL_ABLE.ABLE_CODE%TYPE;
    V_OCOURSE_CODE    TBL_OCOURSE.OCOURSE_CODE%TYPE;
    V_BOOK_CODE       TBL_TEXTBOOK.BOOK_CODE%TYPE;

BEGIN
    SELECT ABLE_CODE INTO V_ABLE_CODE
    FROM TBL_OCLASS
    WHERE PRO_ID = V_PRO_ID;
      
    INSERT INTO TBL_OCLASS(OCLASS_CODE, START_DATE, END_DATE, ABLE_CODE, OCOURSE_CODE, BOOK_CODE)
    VALUES(TBL_OCLASS_SEQ.NEXTVAL, V_START_DATE, V_END_DATE, V_ABLE_CODE, V_OCOURSE_CODE, V_BOOK_CODE);
            
--    COMMIT;
END;

---------------------
-- PRC_OCLASS_UPDATE
SELECT *
FROM TBL_OCLASS;

DESC TBL_OCLASS;

--EXEC PRC_OCLASS_UPDATE(START_DATE, END_DATE)


CREATE OR REPLACE PROCEDURE PRC_OCLASS_UPDATE
(

)
IS
BEGIN
END;

---------------------
-- PRC_OCLASS_DELETE
SELECT *
FROM TBL_OCLASS;

--EXEC PRC_OCLASS_DELETE(OCLASS_CODE)


CREATE OR REPLACE PROCEDURE PRC_OCLASS_DELETE
(

)
IS
BEGIN
END;

--------------------------------------------------------------------------------
--배점{개설과목[개설과정(강의실, 과정), 강의가능(과목, 교수)]}
----------------------
--PRC_POINT_INSERT      --> 개설과목 하나당 배점은 하나여야 하는데 
                        --  개설과목 하나에 여러 배점이 등록이 되네
                        --> 배점 디폴트 0 어떻게 적용시키지?
                        --  INSERT문에서 없애면 디폴트값 이외의 값을 못넣음
SELECT *
FROM TBL_POINT;

--EXEC PRC_POINT_INSERT(V_POINT_ATTEND, V_POINT_PRACTICE, V_POINT_WRITE, V_OCLASS_CODE);
EXEC PRC_POINT_INSERT(20, 20, 60, 100);   -- 없는데이터 
EXEC PRC_POINT_INSERT(-1, 60, 20, 1);     -- 출석 음수
EXEC PRC_POINT_INSERT(20, -1, 60, 1);     -- 실기 음수 
EXEC PRC_POINT_INSERT(20, 60, -1, 1);     -- 필기 음수 
EXEC PRC_POINT_INSERT(100, 100, 100, 1);  -- 총합 100 이상 
EXEC PRC_POINT_INSERT(1, 1, 1, 1);        -- 총합 100 이하 
EXEC PRC_POINT_INSERT(20, 20, 60, 1);     -- 멀쩡한 데이터 
EXEC PRC_POINT_INSERT(0, 0, 0, 1);        -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_POINT_INSERT
(
  V_POINT_ATTEND      IN TBL_POINT.POINT_ATTEND%TYPE
, V_POINT_PRACTICE    IN TBL_POINT.POINT_PRACTICE%TYPE
, V_POINT_WRITE       IN TBL_POINT.POINT_WRITE%TYPE
, V_OCLASS_CODE       IN TBL_POINT.OCLASS_CODE%TYPE
)
IS
    V_POINT_CODE        TBL_POINT.POINT_CODE%TYPE;
    V_FLAT              NUMBER := 1;
    NEEDS_TO_BE_100     EXCEPTION;
    LOWER_THAN_ZERO     EXCEPTION;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_POINT
    WHERE OCLASS_CODE = V_OCLASS_CODE;
    
    IF (V_FLAT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    IF (V_POINT_ATTEND < 0)
        THEN RAISE LOWER_THAN_ZERO;
    ELSIF (V_POINT_PRACTICE < 0)
        THEN RAISE LOWER_THAN_ZERO;
    ELSIF (V_POINT_WRITE < 0)
        THEN RAISE LOWER_THAN_ZERO;
    END IF;
    
    IF (V_POINT_ATTEND + V_POINT_PRACTICE + V_POINT_WRITE != 0 AND
        V_POINT_ATTEND + V_POINT_PRACTICE + V_POINT_WRITE < 100)
        THEN RAISE NEEDS_TO_BE_100;
    END IF;
    
    INSERT INTO TBL_POINT(POINT_CODE, POINT_ATTEND, POINT_PRACTICE, POINT_WRITE, OCLASS_CODE)
    VALUES(TBL_POINT_SEQ.NEXTVAL, V_POINT_ATTEND, V_POINT_PRACTICE, V_POINT_WRITE, V_OCLASS_CODE);
    
    EXCEPTION
        WHEN LOWER_THAN_ZERO
            THEN RAISE_APPLICATION_ERROR(-20003, '유효하지 않은 데이터');
        WHEN NEEDS_TO_BE_100
            THEN RAISE_APPLICATION_ERROR(-20004, '총합 100점이 되어야 합니다');
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');
--        WHEN OTHERS
--            THEN ROLLBACK;
--    COMMIT;
    
END;

----------------------
--PRC_POINT_UPDATE
SELECT *
FROM TBL_POINT;

--EXEC PRC_POINT_UPDATE(POINT_CODE, POINT_ATTEND, POINT_PRACTICE, POINT_WRITE)
EXEC PRC_POINT_UPDATE(100, 20, 20, 60);   -- 없는데이터 
EXEC PRC_POINT_UPDATE(3, -1, 60, 20);     -- 출석 음수
EXEC PRC_POINT_UPDATE(3, 20, -1, 60);     -- 실기 음수 
EXEC PRC_POINT_UPDATE(3, 20, 60, -1);     -- 필기 음수 
EXEC PRC_POINT_UPDATE(3, 100, 100, 100);  -- 총합 100 이상 
EXEC PRC_POINT_UPDATE(3, 1, 1, 1);        -- 총합 100 이하 
EXEC PRC_POINT_UPDATE(3, 10, 20, 70);     -- 멀쩡한 데이터

CREATE OR REPLACE PROCEDURE PRC_POINT_UPDATE
(
  V_POINT_CODE      IN TBL_POINT.POINT_CODE%TYPE
, V_POINT_ATTEND    IN TBL_POINT.POINT_ATTEND%TYPE
, V_POINT_PRACTICE  IN TBL_POINT.POINT_PRACTICE%TYPE
, V_POINT_WRITE     IN TBL_POINT.POINT_WRITE%TYPE
)
IS
    V_FLAT              NUMBER := 1;
    NEEDS_TO_BE_100     EXCEPTION;
    LOWER_THAN_ZERO     EXCEPTION;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_FLAT
    FROM TBL_POINT
    WHERE POINT_CODE = V_POINT_CODE;
    
    IF (V_FLAT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    IF (V_POINT_ATTEND < 0)
        THEN RAISE LOWER_THAN_ZERO;
    ELSIF (V_POINT_PRACTICE < 0)
        THEN RAISE LOWER_THAN_ZERO;
    ELSIF (V_POINT_WRITE < 0)
        THEN RAISE LOWER_THAN_ZERO;
    END IF;
    
    IF (V_POINT_ATTEND + V_POINT_PRACTICE + V_POINT_WRITE < 100)
        THEN RAISE NEEDS_TO_BE_100;
    END IF;
    
    UPDATE TBL_POINT
    SET POINT_ATTEND = V_POINT_ATTEND
      , POINT_PRACTICE = V_POINT_PRACTICE
      , POINT_WRITE = V_POINT_WRITE
    WHERE POINT_CODE = V_POINT_CODE;
    
    EXCEPTION
        WHEN LOWER_THAN_ZERO
            THEN RAISE_APPLICATION_ERROR(-20003, '유효하지 않은 데이터');
        WHEN NEEDS_TO_BE_100
            THEN RAISE_APPLICATION_ERROR(-20004, '총합 100점이 되어야 합니다');
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '데이터 없음');
--        WHEN OTHERS
--            THEN ROLLBACK;
--    COMMIT;
END;







